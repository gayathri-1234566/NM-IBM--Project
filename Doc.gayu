/*******************************************************
 * Project Title: IBM-FE-Login
 * Description: Single Page Application for Login system
 * Author: (You can add your name here)
 * Lines: ~230
 *******************************************************/

// ----------- App State and Elements -----------
const appState = {
  user: null,
  currentPage: 'login',
};

// ----------- Utility Functions -----------
const $ = (selector) => document.querySelector(selector);
const createEl = (tag, attrs = {}, children = []) => {
  const el = document.createElement(tag);
  Object.entries(attrs).forEach(([k, v]) => el.setAttribute(k, v));
  children.forEach((c) =>
    typeof c === 'string' ? el.appendChild(document.createTextNode(c)) : el.appendChild(c)
  );
  return el;
};

function saveUser(user) {
  localStorage.setItem('ibmUser', JSON.stringify(user));
}

function getUser() {
  const data = localStorage.getItem('ibmUser');
  return data ? JSON.parse(data) : null;
}

function clearUser() {
  localStorage.removeItem('ibmUser');
}

// ----------- Pages (Templates) -----------

function renderLoginPage() {
  const container = createEl('div', { class: 'page login-page' }, [
    createEl('h2', {}, ['IBM-FE Login']),
    createEl('input', { id: 'username', placeholder: 'Username' }),
    createEl('input', { id: 'password', type: 'password', placeholder: 'Password' }),
    createEl('button', { id: 'loginBtn' }, ['Login']),
    createEl('p', { id: 'error', class: 'error' }, []),
  ]);

  container.querySelector('#loginBtn').addEventListener('click', handleLogin);
  return container;
}

function renderDashboardPage() {
  const user = appState.user;
  const container = createEl('div', { class: 'page dashboard-page' }, [
    createEl('h2', {}, [Welcome, ${user.username}]),
    createEl('p', {}, [Role: ${user.role}]),
    createEl('p', {}, [Last login: ${user.lastLogin}]),
    createEl('button', { id: 'logoutBtn' }, ['Logout']),
    createEl('div', { class: 'section' }, [
      createEl('h3', {}, ['User Data']),
      createEl('pre', { id: 'userData' }, [JSON.stringify(user, null, 2)]),
    ]),
  ]);

  container.querySelector('#logoutBtn').addEventListener('click', handleLogout);
  return container;
}

function render404Page() {
  const container = createEl('div', { class: 'page not-found' }, [
    createEl('h2', {}, ['404 - Page Not Found']),
    createEl('button', { id: 'goHome' }, ['Go to Login']),
  ]);

  container.querySelector('#goHome').addEventListener('click', () => {
    navigateTo('login');
  });

  return container;
}

// ----------- Authentication Logic -----------

const fakeDB = [
  { username: 'admin', password: '1234', role: 'Administrator' },
  { username: 'user', password: 'abcd', role: 'User' },
];

function handleLogin() {
  const username = $('#username').value.trim();
  const password = $('#password').value.trim();
  const errorBox = $('#error');

  if (!username || !password) {
    errorBox.textContent = 'Please fill all fields';
    return;
  }

  const user = fakeDB.find((u) => u.username === username && u.password === password);
  if (user) {
    const loginUser = {
      username: user.username,
      role: user.role,
      lastLogin: new Date().toLocaleString(),
    };
    appState.user = loginUser;
    saveUser(loginUser);
    navigateTo('dashboard');
  } else {
    errorBox.textContent = 'Invalid credentials';
  }
}

function handleLogout() {
  clearUser();
  appState.user = null;
  navigateTo('login');
}

// ----------- Router System -----------

function navigateTo(page) {
  appState.currentPage = page;
  renderPage();
}

function renderPage() {
  const root = $('#app');
  root.innerHTML = '';

  let pageEl;
  switch (appState.currentPage) {
    case 'login':
      pageEl = renderLoginPage();
      break;
    case 'dashboard':
      pageEl = appState.user ? renderDashboardPage() : renderLoginPage();
      break;
    default:
      pageEl = render404Page();
      break;
  }

  root.appendChild(pageEl);
}

// ----------- Init Function -----------

function initApp() {
  const savedUser = getUser();
  if (savedUser) {
    appState.user = savedUser;
    navigateTo('dashboard');
  } else {
    navigateTo('login');
  }
}

// ----------- Theme & UI Enhancements -----------

function addThemeToggle() {
  const toggleBtn = createEl('button', { id: 'themeToggle' }, ['Toggle Theme']);
  toggleBtn.addEventListener('click', () => {
    document.body.classList.toggle('dark');
    localStorage.setItem(
      'ibmTheme',
      document.body.classList.contains('dark') ? 'dark' : 'light'
    );
  });
  document.body.appendChild(toggleBtn);
}

function applySavedTheme() {
  const theme = localStorage.getItem('ibmTheme');
  if (theme === 'dark') document.body.classList.add('dark');
}

// ----------- Loading Screen -----------
function showLoader() {
  const loader = createEl('div', { id: 'loader' }, ['Loading...']);
  document.body.appendChild(loader);
  setTimeout(() => {
    loader.remove();
  }, 800);
}

// ----------- Run the App -----------
window.addEventListener('DOMContentLoaded', () => {
  showLoader();
  applySavedTheme();
  addThemeToggle();

  const root = createEl('div', { id: 'app' });
  document.body.appendChild(root);
  initApp();
});

// ----------- Styles (Optional Inline) -----------
const style = document.createElement('style');
style.textContent = `
  body {
    font-family: Arial, sans-serif;
    background: #f3f3f3;
    margin: 0;
    padding: 40px;
    transition: background 0.3s, color 0.3s;
  }
  body.dark {
    background: #121212;
    color: #f1f1f1;
  }
  #app {
    max-width: 400px;
    margin: 0 auto;
    padding: 20px;
    background: white;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0,0,0,0.2);
  }
  body.dark #app {
    background: #1e1e1e;
  }
  input {
    display: block;
    width: 100%;
    padding: 10px;
    margin: 8px 0;
    border-radius: 6px;
    border: 1px solid #ccc;
  }
  button {
    padding: 10px 20px;
    background: #0078d7;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
  }
  button:hover {
    background: #005a9e;
  }
  .error {
    color: red;
    font-size: 14px;
    margin-top: 8px;
  }
  #themeToggle {
    position: fixed;
    bottom: 20px;
    right: 20px;
  }
  #loader {
    position: fixed;
    top: 0; left: 0;
    right: 0; bottom: 0;
    background: rgba(255,255,255,0.9);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 24px;
  }
`;
document.head.appendChild(style);
